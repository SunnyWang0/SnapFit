# SnapFit Backend Architecture Overview

## Storage Solution
- Using Cloudflare R2 for photo storage
- Two versions of each photo stored:
  1. Original (high quality WebP, 80% quality)
  2. Thumbnail (200x200px, WebP, 60% quality)
- Photos stored in structured paths: `users/${userId}/photos/${timestamp}`

## Performance Optimizations
1. CDN Caching
   - Thumbnails served through Cloudflare's CDN
   - Reduces latency and load times
   - Edge location caching

2. Frontend Implementation
   - Uses virtualization for efficient list rendering
   - Implements infinite scroll with React Query
   - Only renders entries currently in viewport
   - Pre-fetches next batch of entries

3. Progressive Loading
   - Initial batch of 10 entries
   - Subsequent batches loaded as needed
   - Uses cursor-based pagination

## Image Processing
- All images converted to WebP format
- Thumbnails generated at upload time
- Parallel processing of original and thumbnail versions
- No client-side encryption (R2's built-in encryption sufficient)

## Database Schema
prisma
model Photo {
id String @id @default(cuid())
userId String
originalKey String
thumbnailKey String
takenAt DateTime @default(now())
weight Float?
bodyFat Float?
user User @relation(fields: [userId], references: [id])
@@index([userId, takenAt])
}


## Security
- No additional authentication layer needed
- R2 bucket is private by default
- Relies on app-level user authentication
- Uses Cloudflare's built-in DDoS protection

## Worker Implementation
- Simple POST endpoint for uploads
- GET endpoint for image retrieval
- Handles both original and thumbnail versions
- Uses KV for thumbnail caching

## Client-Side Implementation
- Virtualized list view for smooth scrolling
- Lazy loading of images
- Pre-generated thumbnails for list view
- Full-size images loaded only when viewing specific entries

## Cost Efficiency
- Minimal storage overhead from thumbnails
- Reduced bandwidth through CDN caching
- Efficient image format (WebP)
- No unnecessary encryption overhead

This design prioritizes:
Performance through smart caching and loading strategies
Simplicity by removing unnecessary complexity
Cost efficiency through optimized storage and delivery
User experience with smooth scrolling and quick loading
Scalability through Cloudflare's global infrastructure